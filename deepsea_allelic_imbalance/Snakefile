rule download_bam:
    params:
        lambda wildcards: config[wildcards.data]['path']
    output:
        'download/{data}.bam'
    shell:
        'wget {params[0]} -O {output[0]}'

rule download_bami:
    params:
        lambda wildcards: config[wildcards.data]['path']
    output:
        'download/{data}.bam.bai'
    shell:
        'wget {params[0]}.bai -O {output[0]}'

rule call_variant_pre:
    input:
        'download/{data}.bam',
        'download/{data}.bam.bai',
        config['genome_assembly']['fasta']
    output:
        temp('data/{data}.pre_varscan.gz')
    shell:
        '''samtools view -b -q 10 {input[0]} | \
        samtools mpileup -f {input[2]} - > {output[0]}'''

rule call_variant:
    input:
        'data/{data}.pre_varscan.gz'
    output:
        temp('data/{data}.varscan.gz')
    params:
        varscan = config['call_varscan']
    shell:
        '''{params.varscan} pileup2snp {input[0]} --min-coverage 100 \
        --min-reads2 20 | \
        gzip > {output[0]}'''

rule filtering:
    input:
        'data/{data}.varscan.gz'
    output:
        'data/{data}.varscan.filtered.gz'
    shell:
        'python ../allelic_imbalance/scripts/filtering.py --infile {input[0]} --outfile {output[0]}'

rule draw_hist_rmd:
    input:
        'data/{data}.varscan.filtered.gz'
    output:
        temp('report/{data}.allele_freq.Rmd')
    params:
        envir = '../'
    run:
        rmd = '''---
title: "Evaluation on allelic imbalanced variant (DNase's DGF) - Allele frequency"
output:
    html_document:
        number_sections: true
        toc_float: true
        toc: true
        toc_depth: 3
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

```{{r setup}}
knitr::opts_knit$set(root.dir = '{envir}')
```

```{{r}}
library(ggplot2)
mydata <- read.table('{input}', sep = '\\t', header = T)
mydata$freq <- mydata$Reads2 / (mydata$Reads1 + mydata$Reads2)
ggplot(mydata) + geom_histogram(aes(x = freq), binwidth = 0.1) + ggtitle('Allele frequency')
```

```{{r}}
library(moments)
kur <- kurtosis(mydata$freq[mydata$freq < 0.2])
```

The kurtosis of allele frequency is `r kur`.
'''.format(input=input[0], envir=params.envir)
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule draw_hist_html:
    input:
        'report/{data}.allele_freq.Rmd'
    output:
        'report/{data}.allele_freq.html'
    shell:
        '''Rscript -e "rmarkdown::render('./{input[0]}')"'''

rule calculate_pvalue:
    input:
        'data/{data}.varscan.filtered.gz'
    output:
        'data/{data}.imbalance_pvalue.gz'
    shell:
        'python ../allelic_imbalance/scripts/imbalance_pvalue.py --infile {input[0]} --outfile {output[0]}'

rule prepare_config:
    input:
        'data/{data}.imbalance_pvalue.gz',
        'report/{data}.allele_freq.html'
    params:
        name = lambda wildcards: wildcards.data,
        inputfile = 'data/{data}.imbalance_pvalue.gz',
        model = config['model']['name'],
        model_dir = config['model']['workdir'],
        label_idx = lambda wildcards: config[wildcards.data]['label_idx'],
        fasta = config['genome_assembly']['fasta'],
        size = config['genome_assembly']['size']
    output:
        'data/config.{data}.allelic_imbalance.yaml'
    run:
        import os
        inputfile = os.path.abspath(params.inputfile)
        yaml = '''
data:
  {name}_allelic_imbalance:
    name: '{inputfile}'
    method: '_formatting_allelic_imbalance.snakemake'
window_size: 1000 # Attention: this should match the window size of the model below
model:
  name: '{model}'
  snakemake: 'modules/submodules/input2score/_train_model_do_nothing.snakemake'
  workdir: '{model_dir}'
label:
  allelic_imbalance_{name}:
    {name} : {label_idx}
genome_assembly:
  fasta: '{fasta_path}'
  size: '{fasta_size}'
performance:
  mode1:
    method: '_histogram.snakemake'
    params: 'some other input here'
'''.format(name=params.name, inputfile=inputfile, fasta_path=params.fasta, fasta_size=params.size,
            model=params.model, model_dir=params.model_dir,
            label_idx=params.label_idx)
        o = open(output[0], 'w')
        o.write(yaml)
        o.close()

#
# rule call_imbalanceï¼›
#
# rule html:
#
rule rmd:
    output:
        temp('report/{data}.Rmd')
    params:
        name = lambda wildcards: wildcards.data,
        model = config['model']['name'],
    run:
        rmd = '''---
title: "Evaluation on allelic imbalanced variant (DNase's DGF) - Allelic Imbalance"
# author: Yanyu Liang
output:
    html_document:
        number_sections: true
        toc_float: true
        toc: true
        toc_depth: 3
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

```{{r setup, include=FALSE}}
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '{envir}')
options(width=2000)
```

# Load Data
```{{r}}
source('https://raw.githubusercontent.com/liangyy/deep_variant/master/rmd/my_r.R')
library(feather)
library(ggplot2)
library(reshape2)
variant_url <- 'data/{name}.imbalance_pvalue.gz'
variant <- read.table(variant_url, sep = '\\t', header = T)
score_url <- '../../../deep_variant/nick/DeepVariantPrediction/score/{model}/allelic_imbalance_{name}.{name}_allelic_imbalance_result.feather'
score <- read_feather(score_url)
variant$Ref <- NA
variant$Ref[score$Varient.ID] <- score$Allele1
variant$Alt <- NA
variant$Alt[score$Varient.ID] <- score$Allele2
```

# Call Imbalance

Definition: ( 0.7 < Reference Allele Frequency (RAF) < 0.8 | RAF < 0.4 ) & P.value < 0.01

```{{r}}
variant$af <- variant$Reads1 / (variant$Reads1 + variant$Reads2)
variant <- variant[variant$af <= .8,]
imbalance.deepsea <- variant$af > 0.7 | variant$af < 0.4
variant.ai.deepsea <- variant[imbalance.deepsea & variant$P.Value < 0.01,]
ggplot(variant.ai.deepsea) + geom_bar(aes(x = log(Odds.Ratio) > 0, y = ..count..)) + ggtitle('Reference Biased vs Alternative Biased')
ggplot(variant.ai.deepsea) + geom_point(aes(x = Alt, y = Ref, color =log(Odds.Ratio))) + scale_color_gradient2(midpoint=0, low="blue", mid="white", high="red", space ="Lab" ) + geom_abline(intercept = 0.07, slope = 1) + geom_abline(intercept = -0.07, slope = 1) + ggtitle('Predicted Ref vs. Predicted Alt')
```

# Balance vs. Imbalance

Balance: 0.45 < RAF < 0.55 & P.value > 0.05
Imbalance: (0.7 < RAF < 0.8 | RAF < 0.4) & P.value < 0.01

## Overview

```{{r}}
imbalance <- variant$af > 0.7 | variant$af < 0.4
balance <- variant$af < 0.55 & variant$af > 0.45
imbalance <- imbalance & variant$P.Value < 0.01
balance <- balance & variant$P.Value > 0.05
variant$Imbalance <- 'Unsure'
variant$Imbalance[imbalance] <- 'Imbalanced'
variant$Imbalance[balance] <- 'Balanced'
ggplot(variant) + geom_bar(aes(x = Imbalance, y = ..count..)) + ggtitle('Count of Balanced and Imbalanced Variants')
variant.pass <- variant
ggplot(variant) + geom_point(aes(x = Alt, y = Ref, color = log10(Odds.Ratio))) + facet_grid(.~Imbalance) + geom_abline(intercept = 0.07, slope = 1) + geom_abline(intercept = -0.07, slope = 1) + ggtitle('The Predicted Effect of Heterozygous sites in DNase-seq of \\n {name}') + scale_color_gradient2(midpoint=0, low="blue", mid="white", high="red", space ="Lab" )
```



## Observed Log Odds Ratio vs. Predicted Log Odds Ratio

```{{r}}
variant$logit.raf <- logit(variant$af)
variant$log10.oddsratio.predicted <- logit(variant$Ref) - logit(variant$Alt)
variant$logit.raf.predicted <- logit(variant$Ref / (variant$Ref + variant$Alt))
model.linear = lm(logit.raf ~ 0 + logit.raf.predicted, data = variant)
ggplot(variant, aes(x = logit.raf.predicted, y = logit.raf)) + geom_point(aes(color = Imbalance)) + geom_smooth(method='lm',formula=y~0+x) + annotate("text", x = 0.4, y = -1, label = lm_eqn(model.linear), parse = TRUE) + ggtitle('Observed Reference Allele Frequency vs \n Predicted RAF')
```

### Predictive power of predicted p(ref) and p(alt)

Model: imbalance ~ f(ref, alt), link = binomial. $f_1 = |x - y|$.
$f_2 = |\log_{{10}}(x/(1-x)) - \log_{{10}}(y/(1-y))|$. $f_3 = logit(\\frac{{p_0}}{{p_0 + p_1}}) = \log_{{10}} \\frac{{p_0}}{{p_1}}$

```{{r}}
variant.pass.interest <- variant[variant$Imbalance != 'Unsure',]
model.logistic.abs <- glm(as.numeric(Imbalance == 'Imbalanced') ~ abs(Ref - Alt), family=binomial(link='logit'), data=variant.pass.interest)
model.logistic.lor <- glm(as.numeric(Imbalance == 'Imbalanced') ~ abs(log10.oddsratio.predicted), family=binomial(link='logit'), data=variant.pass.interest)
model.logistic.logitraf <- glm(as.numeric(Imbalance == 'Imbalanced') ~ abs(logit.raf.predicted), family=binomial(link='logit'), data=variant.pass.interest)
```

```{{r, results='asis'}}
library(pander)
panderOptions('knitr.auto.asis', FALSE)
pander(model.logistic.abs)
pander(model.logistic.lor)
pander(model.logistic.logitraf)
```

```{{r, results='asis'}}
library(precrec)
joined <- join_scores(model.logistic.abs$fitted.values, model.logistic.lor$fitted.values, model.logistic.logitraf$fitted.values)
msmdat <- mmdata(joined, as.numeric(variant.pass.interest$Imbalance == 'Imbalanced'), modnames = c('f1', 'f2', 'f3'))
mscurves <- evalmod(msmdat)
plot(mscurves)
pander(auc(mscurves))
```
'''.format(model=params.model, name=params.name, envir='../')
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule report:
    input:
        'report/{data}.Rmd'
    output:
        'report/{data}.html'
    shell:
        '''Rscript -e "rmarkdown::render('./{input[0]}')"'''
