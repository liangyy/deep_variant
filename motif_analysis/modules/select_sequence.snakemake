# This script takes sequence data and prediction in HDF5
# and output selected sequence set for downstream analysis

def get_all_seq(wildcards):
    out = []
    for data in config[wildcards.dataname]:
        out.append('data/{dataname}.{data}/gc.feather'.format(dataname=wildcards.dataname, data=data))
    return out

def get_labels(wildcards):
    out = []
    for data in config[wildcards.dataname]:
        out.append(data)
    return out
# rule all:
#     input:
#         lambda wildcards: get_all_seq(wildcards)

rule select_sequence:
    input:
        ypred = lambda wildcards: config[wildcards.dataname][wildcards.data]['ypred']['path'],
        y = lambda wildcards: config[wildcards.dataname][wildcards.data]['y']['path'],
        x = lambda wildcards: config[wildcards.dataname][wildcards.data]['x']['path']
    output:
        p = 'data/{dataname}.{data}/selected_positive.hdf5',
        n = 'data/{dataname}.{data}/selected_negative.hdf5'
    params:
        ypred = lambda wildcards: config[wildcards.dataname][wildcards.data]['ypred']['name'],
        y = lambda wildcards: config[wildcards.dataname][wildcards.data]['y']['name'],
        x = lambda wildcards: config[wildcards.dataname][wildcards.data]['x']['name'],
        y_label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['y']['label_idx'],
        yp_label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['ypred']['label_idx'],
        num = lambda wildcards: config[wildcards.dataname][wildcards.data]['extract_num'],
        ypdouble = lambda wildcards: config[wildcards.dataname][wildcards.data]['ypred']['double'],
        ydouble = lambda wildcards: config[wildcards.dataname][wildcards.data]['y']['double'],
        ypremove = lambda wildcards: config[wildcards.dataname][wildcards.data]['ypred']['remove'],
        yremove = lambda wildcards: config[wildcards.dataname][wildcards.data]['y']['remove'],
        reweight = lambda wildcards: config['reweight'],
        gc = lambda wildcards: config[wildcards.dataname][wildcards.data]['gc']
    log:
        'logs/{dataname}.{data}/select_sequence.log'
    shell:
        '''python scripts/select_sequence.py --ypred {input.ypred} \
        --y {input.y} \
        --x {input.x} \
        --ypred_name {params.ypred} \
        --y_name {params.y} \
        --x_name {params.x} \
        --y_label_idx {params.y_label_idx} \
        --yp_label_idx {params.yp_label_idx} \
        --num {params.num} \
        --out_pos {output.p} \
        --out_neg {output.n} \
        --ydouble {params.ydouble} \
        --ypdouble {params.ypdouble} \
        --yremove {params.yremove} \
        --ypremove {params.ypremove} \
        --reweight {params.reweight} \
        --gc {params.gc}
        2> {log}'''

rule report_gc_bias_compute:
    input:
        pos = 'data/{dataname}.{data}/selected_positive.hdf5',
        neg = 'data/{dataname}.{data}/selected_negative.hdf5'
    output:
        temp('data/{dataname}.{data}/gc.feather')
    params:
        envir = '../'
    shell:
        'python scripts/compute_gc.py --pos {input.pos} --neg {input.neg} --out {output[0]}'


rule report_gc_bias_rmd:
    # input:
    #     all_files = lambda wildcards: get_all_seq(wildcards)
    output:
        temp('report/select_sequence/{dataname}.gc.Rmd')
    params:
        filelist = lambda wildcards: ','.join(get_labels(wildcards)),
        envir = '../../'
    run:
        rmd = '''---
title: "Motif Analysis - GC content of selected sequences"
output:
    html_document:
        number_sections: true
        toc: true
        toc_depth: 3
        toc_float: true
date: "`r format(Sys.time(), '%B %d, %Y')`"
---

```{{r setup}}
knitr::opts_knit$set(root.dir = '{envir}')
```

# Distribution of GC content

```{{r, echo=TRUE, warning=FALSE}}
library(feather)
library(ggplot2)
library(bsselectR)
envir <- '{envir}'
prefix <- '{dataname}'
filelist <- '{filelist}'
file_prefixs <- strsplit(filelist, ',')[[1]]
for(i in file_prefixs){{
    e <- read_feather(paste0('./data/', prefix, '.', i, '/gc.feather'))
    p <- ggplot() + geom_density(data = e[e$y == 0, ], aes(x = GC.Content, fill = 'negative'), alpha = .5) + geom_density(data = e[e$y == 1, ], aes(x = GC.Content,  fill = 'positive'), alpha = .5) + ggtitle(paste0('GC content of data in ', i)) + theme(legend.position="bottom") + theme(title = element_text(size=5), text = element_text(size=5))
    ggsave(filename = paste0(prefix, '_', i, '_hist.png'), path = 'plots/', width = 3, height = 3, plot = p)
}}
plots <- list()
for(i in file_prefixs){{
    plots[[i]] <- paste0(envir, '/plots/', paste0(prefix, '_', i, '_hist.png'))
}}
bsselect(plots, type = "img", selected = names(plots)[2],
         live_search = TRUE, show_tick = TRUE, height = 5, width = 5, frame_height = 500, frame_width = 500)
```
'''.format(dataname=wildcards.dataname, envir=params.envir, filelist=params.filelist)
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()
rule report_gc_bias_html:
    input:
        rmd = 'report/select_sequence/{dataname}.gc.Rmd',
        all_files = lambda wildcards: get_all_seq(wildcards)
    output:
        'report/select_sequence/{dataname}.gc.html'
    shell:
        '''Rscript -e "rmarkdown::render('./{input.rmd}')"'''
