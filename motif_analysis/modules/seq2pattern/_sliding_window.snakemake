# This module takes sequences and model as input and
# generate feather file containing the odds difference
# generated by masking part of the sequences

rule prepare_input_pos:
    input:
        p = 'data/{dataname}.{data}/selected_positive.hdf5'
    output:
        temp('pattern/{model}/{dataname}.{data}/sliding_window/slided_sequences_positive.hdf5')
    params:
        mask_size = config['method']['sliding_window']['mask_size']
    shell:
        'python scripts/sliding_window_prepare.py --input {input.p} \
        --mask_size {params.mask_size} \
        --output {output[0]}'

rule prepare_input_neg:
    input:
        p = 'data/{dataname}.{data}/selected_negative.hdf5'
    output:
        temp('pattern/{model}/{dataname}.{data}/sliding_window/slided_sequences_negative.hdf5')
    params:
        mask_size = config['method']['sliding_window']['mask_size']
    shell:
        'python scripts/sliding_window_prepare.py --input {input.p} \
        --mask_size {params.mask_size} \
        --output {output[0]}'

rule get_sliding_pattern_pos:
    input:
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_positive.hdf5'.format(model=config['model']['name']),
        model = config['model']['path']
    output:
        op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.feather'.format(model=config['model']['name'])
    params:
        mask_size = config['method']['sliding_window']['mask_size'],
        label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num']
    shell:
        'python scripts/sliding_window_compute.py --model {input.model} \
        --input {input.p} \
        --output {output.op} \
        --mask_size {params.mask_size} \
        --label_idx {params.label_idx}'

rule get_sliding_pattern_neg:
    input:
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_negative.hdf5'.format(model=config['model']['name']),
        model = config['model']['path']
    output:
        op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name'])
    params:
        mask_size = config['method']['sliding_window']['mask_size'],
        label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num']
    shell:
        'python scripts/sliding_window_compute.py --model {input.model} \
        --input {input.p} \
        --output {output.op} \
        --mask_size {params.mask_size} \
        --label_idx {params.label_idx}'

rule report_slide_gen_rmd:
    input:
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.feather'.format(model=config['model']['name']),
        n = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name'])
    output:
        o = temp('report/{model}/{{dataname}}.{{data}}_sliding_window.Rmd'.format(model=config['model']['name']))
    params:
        model = config['model']['name'],
        data = '{dataname}.{data}',
        envir = '../../',
    run:
        rmd = '''
# add Rmd script here
'''.format(model=params.model, data=params.data, input_p=input.p, input_n=input.n, envir=params.envir)
        o = open(output.o, 'w')
        o.write(rmd)
        o.close()

rule report_slide_gen_html:
    input:
        rmd = 'report/{model}/{{dataname}}.{{data}}_sliding_window.Rmd'.format(model=config['model']['name']),
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.feather'.format(model=config['model']['name']),
        n = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name'])
    output:
        'report/{model}/{{dataname}}.{{data}}_sliding_window.html'.format(model=config['model']['name'])
    shell:
        '''Rscript -e "rmarkdown::render('./{input.rmd}')"'''
# do something
