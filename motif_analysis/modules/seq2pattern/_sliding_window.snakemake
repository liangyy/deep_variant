# This module takes sequences and model as input and
# generate feather file containing the odds difference
# generated by masking part of the sequences

rule prepare_input_pos:
    input:
        p = 'data/{dataname}.{data}/selected_positive.hdf5'
    output:
        'pattern/{model}/{dataname}.{data}/sliding_window/slided_sequences_positive.hdf5'
    params:
        mask_size = config['method']['sliding_window']['mask_size']
    shell:
        'python scripts/sliding_window_prepare.py --input {input.p} \
        --mask_size {params.mask_size} \
        --output {output[0]}'

rule prepare_input_neg:
    input:
        p = 'data/{dataname}.{data}/selected_negative.hdf5'
    output:
        'pattern/{model}/{dataname}.{data}/sliding_window/slided_sequences_negative.hdf5'
    params:
        mask_size = config['method']['sliding_window']['mask_size']
    shell:
        'python scripts/sliding_window_prepare.py --input {input.p} \
        --mask_size {params.mask_size} \
        --output {output[0]}'

rule get_sliding_pattern_pos_sbatch:
    input:
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_positive.hdf5'.format(model=config['model']['name']),
        model = config['model']['path']
    output:
        'sbatch/{model}.{{dataname}}.{{data}}.sliding_positive.sbatch'.format(model=config['model']['name'])
    params:
        mask_size = config['method']['sliding_window']['mask_size'],
        label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num'],
        op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.feather'.format(model=config['model']['name']),
        name = '{model}.{{dataname}}.{{data}}.sliding_positive'.format(model=config['model']['name'])
    run:
        sbatch = '''#!/bin/bash
#SBATCH --job-name={name}
#SBATCH --output={name}.out
#SBATCH --error={name}.err
#SBATCH --time=24:00:00
#SBATCH --partition=gpu2
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=50G
#SBATCH --nodes=1
#SBATCH --gres=gpu:1
cd /project2/xinhe/yanyul
source setup.sh
source activate deepvarpred_test
module load cuda/7.5
cd repo/deep_variant/motif_analysis
python scripts/sliding_window_compute.py --model {model} \
--input {input} \
--output {output} \
--mask_size {mask_size} \
--label_idx {label_idx}'''.format(name=params.name, model=input.model, input=input.p, output=params.op, mask_size=params.mask_size, label_idx=params.label_idx)
        o = open(output[0], 'w')
        o.write(sbatch)
        o.close()

rule get_sliding_pattern_neg_sbatch:
    input:
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_negative.hdf5'.format(model=config['model']['name']),
        model = config['model']['path']
    output:
        'sbatch/{model}.{{dataname}}.{{data}}.sliding_negative.sbatch'.format(model=config['model']['name'])
    params:
        mask_size = config['method']['sliding_window']['mask_size'],
        label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num'],
        op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name']),
        name = '{model}.{{dataname}}.{{data}}.sliding_negative'.format(model=config['model']['name'])
    run:
        sbatch = '''#!/bin/bash
#SBATCH --job-name={name}
#SBATCH --output={name}.out
#SBATCH --error={name}.err
#SBATCH --time=24:00:00
#SBATCH --partition=gpu2
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=50G
#SBATCH --nodes=1
#SBATCH --gres=gpu:1
cd /project2/xinhe/yanyul
source setup.sh
source activate deepvarpred_test
module load cuda/7.5
cd repo/deep_variant/motif_analysis
python scripts/sliding_window_compute.py --model {model} \
--input {input} \
--output {output} \
--mask_size {mask_size} \
--label_idx {label_idx}'''.format(name=params.name, model=input.model, input=input.p, output=params.op, mask_size=params.mask_size, label_idx=params.label_idx)
        o = open(output[0], 'w')
        o.write(sbatch)
        o.close()

# rule get_sliding_pattern_neg:
#     input:
#         p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_negative.hdf5'.format(model=config['model']['name']),
#         model = config['model']['path']
#     output:
#         op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name'])
#     params:
#         mask_size = config['method']['sliding_window']['mask_size'],
#         label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num']
#     shell:
#         'python scripts/sliding_window_compute.py --model {input.model} \
#         --input {input.p} \
#         --output {output.op} \
#         --mask_size {params.mask_size} \
#         --label_idx {params.label_idx}'

rule report_slide_gen_rmd:
    input:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.feather'.format(model=config['model']['name']),
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name'])
    output:
        o = temp('report/{model}/{{dataname}}.{{data}}_sliding_window.Rmd'.format(model=config['model']['name']))
    params:
        envir = '../../'
    run:
        rmd = '''---
title: "Motif Analysis - sliding window"
output:
    html_document:
        number_sections: true
        toc: true
        toc_depth: 3
        toc_float: true
date: "`r format(Sys.time(), '%B %d, %Y')`"
---

```{{r setup}}
knitr::opts_knit$set(root.dir = '{envir}')
```

# Spatial Mask Effect - Definition

Mask Effect is defined as $\log_2 \\frac{{p_1}}{{1-p_1}} - \log_2 \\frac{{p_0}}{{1-p_0}}$. Intuitively, as $p$ increases, $\log_2 \\frac{{p}}{{1-p}}$ increases.

```{{r logodds}}
p <- seq(0, 1, by = 0.01)
log2odds <- log2(p / (1-p))
plot(p, log2odds)
```

# Load Results

```{{r}}
source('scripts/my_r.R')
library(feather)
library(ggplot2)
library(reshape2)
neg <- read_feather('{input_n}')
pos <- read_feather('{input_p}')
```

# Spatial Mask Effect in Sequences

## Negative sequences

```{{r}}
draw_heatmap(neg, 'Negative')
```

## Positive sequences

```{{r}}
draw_heatmap(pos, 'Positive')
```

# Spatial Max/Min/Mean of Mask Effect (Collapsing spatial information)

```{{r}}
data.neg <- summarize_stat(neg, 'negative')
data.pos <- summarize_stat(pos, 'positive')
data <- rbind(data.neg, data.pos)
ggplot(data) + geom_boxplot(aes(x = variable, y = value, fill = label)) + ggtitle('Mean/Max/Min of Mask Effect') + labs(x = 'stat', y = 'value')
```
'''.format(input_p=input[0], input_n=input[1], envir=params.envir)
        o = open(output.o, 'w')
        o.write(rmd)
        o.close()

rule report_slide_gen_html:
    input:
        rmd = 'report/{model}/{{dataname}}.{{data}}_sliding_window.Rmd'.format(model=config['model']['name']),
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.feather'.format(model=config['model']['name']),
        n = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name'])
    output:
        'report/{model}/{{dataname}}.{{data}}_sliding_window.html'.format(model=config['model']['name'])
    shell:
        '''Rscript -e "rmarkdown::render('./{input.rmd}')"'''

rule extract_signal:
    input:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_{{mode}}.feather'.format(model=config['model']['name'])
    output:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/signal_{{mode}}.txt'.format(model=config['model']['name'])
    params:
        config['method']['sliding_window']['quantile']
    shell:
        'Rscript scripts/sliding_window_signal2region.R --file={input[0]} --out={output[0]} --mode={wildcards.mode} --quantile={params[0]}'

rule signal2seq:
    input:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/signal_{{mode}}.txt'.format(model=config['model']['name']),
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_{{mode}}.hdf5'.format(model=config['model']['name'])
    output:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/extracted_{{mode}}.fa'.format(model=config['model']['name'])
    params:
        mask_size = config['method']['sliding_window']['mask_size'],
        window_size = config['method']['sliding_window']['window_size']
    shell:
        'python scripts/signal2seq.py --position {input[0]} --sequence {input[1]} \
        --out {output[0]} --mask_size {params.mask_size} --window_size {params.window_size} --merge 1'
