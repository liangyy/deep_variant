# This module takes sequences and model as input and
# generate feather file containing the odds difference
# generated by masking part of the sequences

rule prepare_input_pos:
    input:
        p = 'data/{dataname}.{data}/selected_positive.hdf5'
    output:
        'pattern/{model}/{dataname}.{data}/sliding_window/slided_sequences_positive.MaskSize_{mask_size}.hdf5'
    params:
        # mask_size = config['method']['sliding_window']['mask_size']
    shell:
        'python scripts/sliding_window_prepare.py --input {input.p} \
        --mask_size {wildcards.mask_size} \
        --output {output[0]}'

rule prepare_input_neg:
    input:
        p = 'data/{dataname}.{data}/selected_negative.hdf5'
    output:
        'pattern/{model}/{dataname}.{data}/sliding_window/slided_sequences_negative.MaskSize_{mask_size}.hdf5'
    params:
        # mask_size = config['method']['sliding_window']['mask_size']
    shell:
        'python scripts/sliding_window_prepare.py --input {input.p} \
        --mask_size {wildcards.mask_size} \
        --output {output[0]}'

rule get_sliding_pattern_pos_sbatch:
    input:
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_positive.MaskSize_{{mask_size}}.hdf5'.format(model=config['model']['name']),
        model = config['model']['path']
    output:
        'sbatch/{model}.{{dataname}}.{{data}}.sliding_positive.MaskSize_{{mask_size}}.sbatch'.format(model=config['model']['name'])
    params:
        # mask_size = config['method']['sliding_window']['mask_size'],
        label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num'],
        op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.MaskSize_{{mask_size}}.feather'.format(model=config['model']['name']),
        name = '{model}.{{dataname}}.{{data}}.sliding_positive'.format(model=config['model']['name'])
    run:
        sbatch = '''#!/bin/bash
#SBATCH --job-name={name}
#SBATCH --output={name}.out
#SBATCH --error={name}.err
#SBATCH --time=24:00:00
#SBATCH --partition=gpu2
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=50G
#SBATCH --nodes=1
#SBATCH --gres=gpu:1
cd /project2/xinhe/yanyul
source setup.sh
source activate deepvarpred_test
module load cuda/7.5
cd repo/deep_variant/motif_analysis
python scripts/sliding_window_compute.py --model {model} \
--input {input} \
--output {output} \
--mask_size {mask_size} \
--label_idx {label_idx}'''.format(name=params.name, model=input.model, input=input.p, output=params.op, mask_size=wildcards.mask_size, label_idx=params.label_idx)
        o = open(output[0], 'w')
        o.write(sbatch)
        o.close()

rule get_sliding_pattern_neg_sbatch:
    input:
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_negative.MaskSize_{{mask_size}}.hdf5'.format(model=config['model']['name']),
        model = config['model']['path']
    output:
        'sbatch/{model}.{{dataname}}.{{data}}.sliding_negative.MaskSize_{{mask_size}}.sbatch'.format(model=config['model']['name'])
    params:
        # mask_size = config['method']['sliding_window']['mask_size'],
        label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num'],
        op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.MaskSize_{{mask_size}}.feather'.format(model=config['model']['name']),
        name = '{model}.{{dataname}}.{{data}}.sliding_negative'.format(model=config['model']['name'])
    run:
        sbatch = '''#!/bin/bash
#SBATCH --job-name={name}
#SBATCH --output={name}.out
#SBATCH --error={name}.err
#SBATCH --time=24:00:00
#SBATCH --partition=gpu2
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=1
#SBATCH --mem-per-cpu=50G
#SBATCH --nodes=1
#SBATCH --gres=gpu:1
cd /project2/xinhe/yanyul
source setup.sh
source activate deepvarpred_test
module load cuda/7.5
cd repo/deep_variant/motif_analysis
python scripts/sliding_window_compute.py --model {model} \
--input {input} \
--output {output} \
--mask_size {mask_size} \
--label_idx {label_idx}'''.format(name=params.name, model=input.model, input=input.p, output=params.op, mask_size=wildcards.mask_size, label_idx=params.label_idx)
        o = open(output[0], 'w')
        o.write(sbatch)
        o.close()

# rule get_sliding_pattern_neg:
#     input:
#         p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_negative.hdf5'.format(model=config['model']['name']),
#         model = config['model']['path']
#     output:
#         op = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.feather'.format(model=config['model']['name'])
#     params:
#         mask_size = config['method']['sliding_window']['mask_size'],
#         label_idx = lambda wildcards: config[wildcards.dataname][wildcards.data]['label_num']
#     shell:
#         'python scripts/sliding_window_compute.py --model {input.model} \
#         --input {input.p} \
#         --output {output.op} \
#         --mask_size {params.mask_size} \
#         --label_idx {params.label_idx}'

rule report_slide_gen_rmd:
    input:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.MaskSize_{{mask_size}}.feather'.format(model=config['model']['name']),
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.MaskSize_{{mask_size}}.feather'.format(model=config['model']['name'])
    output:
        o = temp('report/{model}/{{dataname}}.{{data}}_sliding_window.MaskSize_{{mask_size}}.Rmd'.format(model=config['model']['name']))
    params:
        envir = '../../'
    run:
        rmd = '''---
title: "Motif Analysis - sliding window"
output:
    html_document:
        number_sections: true
        toc: true
        toc_depth: 3
        toc_float: true
date: "`r format(Sys.time(), '%B %d, %Y')`"
---

```{{r setup}}
knitr::opts_knit$set(root.dir = '{envir}')
```

# Spatial Mask Effect - Definition

Mask Effect is defined as $\log_2 \\frac{{p_1}}{{1-p_1}} - \log_2 \\frac{{p_0}}{{1-p_0}}$. Intuitively, as $p$ increases, $\log_2 \\frac{{p}}{{1-p}}$ increases.

```{{r logodds}}
p <- seq(0, 1, by = 0.01)
log2odds <- log2(p / (1-p))
plot(p, log2odds)
```

# Load Results

```{{r}}
source('scripts/my_r.R')
library(feather)
library(ggplot2)
library(reshape2)
neg <- read_feather('{input_n}')
pos <- read_feather('{input_p}')
```

# Spatial Mask Effect in Sequences

## Negative Sequences

```{{r}}
neg.melt <- list()
neg.melt$value <- draw_heatmap(neg, 'Negative')
neg.melt$label <- 'Negative'
neg.melt <- as.data.frame(neg.melt)
```

## Positive Sequences

```{{r}}
pos.melt <- list()
pos.melt$value <- draw_heatmap(pos, 'Positive')
pos.melt$label <- 'Positive'
pos.melt <- as.data.frame(pos.melt)
```

# Spatial Max/Min/Mean of Mask Effect (Collapsing spatial information)

```{{r}}
data.neg <- summarize_stat(neg, 'negative')
data.pos <- summarize_stat(pos, 'positive')
data <- rbind(data.neg, data.pos)
ggplot(data) + geom_boxplot(aes(x = variable, y = value, fill = label)) + ggtitle('Mean/Max/Min of Mask Effect') + labs(x = 'stat', y = 'value')
```

# Distribution of the Score

```{{r}}
ggplot() + geom_histogram(data = neg.melt, aes(x = value, fill = label), alpha = .5) +
geom_histogram(data = pos.melt, aes(x = value, fill = label), alpha = .5) +
ggtitle('Distribution of Score')
```
'''.format(input_p=input[0], input_n=input[1], envir=params.envir)
        o = open(output.o, 'w')
        o.write(rmd)
        o.close()

rule report_slide_gen_html:
    input:
        rmd = 'report/{model}/{{dataname}}.{{data}}_sliding_window.MaskSize_{{mask_size}}.Rmd'.format(model=config['model']['name']),
        p = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_positive.MaskSize_{{mask_size}}.feather'.format(model=config['model']['name']),
        n = 'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_negative.MaskSize_{{mask_size}}.feather'.format(model=config['model']['name'])
    output:
        'report/{model}/{{dataname}}.{{data}}_sliding_window.MaskSize_{{mask_size}}.html'.format(model=config['model']['name'])
    shell:
        '''Rscript -e "rmarkdown::render('./{input.rmd}')"'''

rule extract_signal:
    input:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/pattern_{{mode}}.MaskSize_{{mask_size}}.feather'.format(model=config['model']['name'])
    output:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/signal_{{mode}}.{{extract_mode}}.MaskSize_{{mask_size}}.txt'.format(model=config['model']['name'])
    params:
        config['method']['sliding_window']['quantile'],
        config['method']['sliding_window']['merge']
    shell:
        'Rscript scripts/sliding_window_signal2region.R --file={input[0]} --out={output[0]} --quantile={params[0]} --extract_mode={wildcards.extract_mode} --merge={params[1]}'

rule signal2seq:
    input:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/signal_{{mode}}.{{extract_mode}}.MaskSize_{{mask_size}}.txt'.format(model=config['model']['name']),
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/slided_sequences_{{mode}}.MaskSize_{{mask_size}}.hdf5'.format(model=config['model']['name'])
    output:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/extracted_{{mode}}.{{extract_mode}}.WinSize_{{window_size}}.MaskSize_{{mask_size}}.fa'.format(model=config['model']['name'])
    params:
        # mask_size = config['method']['sliding_window']['mask_size'],
        # window_size = config['method']['sliding_window']['window_size']
        merge = config['method']['sliding_window']['merge']
    shell:
        'python scripts/signal2seq.py --position {input[0]} --sequence {input[1]} \
        --out {output[0]} --mask_size {wildcards.mask_size} --window_size {wildcards.window_size} --merge {params.merge}'

rule signal_block_report_rmd:
    input:
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/signal_positive.positive.MaskSize_{{mask_size}}.txt'.format(model=config['model']['name']),
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/signal_positive.random.MaskSize_{{mask_size}}.txt'.format(model=config['model']['name']),
        'pattern/{model}/{{dataname}}.{{data}}/sliding_window/signal_negative.negative.MaskSize_{{mask_size}}.txt'.format(model=config['model']['name'])
    output:
        o = temp('report/{model}/{{dataname}}.{{data}}_sliding_window.signal_block.MaskSize_{{mask_size}}.Rmd'.format(model=config['model']['name']))
    params:
        envir = '../../',
        prefix_dir = 'pattern/{model}/{{dataname}}.{{data}}/'.format(model=config['model']['name'])
    run:
        rmd = '''---
title: "Motif Analysis - sliding window, the pattern of the signal"
output:
  html_document:
    number_sections: true
    toc: true
    toc_float: true
    toc_depth: 3
date: "`r format(Sys.time(), '%B %d, %Y')`"
---

```{{r setup}}
knitr::opts_knit$set(root.dir = '{envir}')
```

# How critical window distributes along a sequence

```{{r}}
library(ggplot2)
mask.size <- {mask_size}
file.labels <- c('negative.negative', 'positive.random', 'positive.positive')
file.prefix <- '{prefix_dir}/sliding_window/signal_'
file.suffix <- paste0('.MaskSize_', mask.size, '.txt' )
signals <- list()
total.counts <- c()
for(l in file.labels) {{
  file.name <- paste0(file.prefix, l, file.suffix)
  signal <- read.table(file.name, sep = ' ', header = T)
  signal <- signal[with(signal, order(seq_id, pos_id)), ]
  signals[[l]] <- signal
  print(ggplot(signal) + geom_bin2d(aes(x = pos_id, y = seq_id), binwidth = 1) + ggtitle(paste0('Critical window distribution in ', l)))
  total.counts <- c(total.counts, length(unique(signal$seq_id)))
}}
```

# How many sequences have critical windows

For the ones that are randomly selected, it should cover all sequences with high probability. However, in the positive.positive or negative.negative, some sequences do not have critical windows.

```{{r, results = 'asis'}}
library(pander)
panderOptions('table.split.table', Inf)
total.counts <- data.frame(label = file.labels[1], total.counts = total.counts)
pander(total.counts)
```

# How many critical window blocks in a sequence

We merge all overlapping critical windows into critical window blocks.

```{{r}}
count_nblock <- function(x) {{
  if(length(x) == 1) {{
    return(1)
  }}
  count <- 1
  pre <- x[1]  # In the input file, the pos_id is 1-based
  for(i in 2 : length(x)) {{
    if((x[i] - pre) >= mask.size) {{
      count <- count + 1
    }}
    pre <- x[i]
  }}
  return(count)
}}
for(l in names(signals)) {{
  nblock <- aggregate(pos_id ~ seq_id, data = signals[[l]], count_nblock)
  colnames(nblock) <- c('seq_id', 'nblock')
  print(ggplot(nblock) + geom_bar(aes(x = nblock)) + ggtitle(paste0('Number of separated critical window blocks per sequence \n in ', l)))
}}
```

# How big the block is

```{{r}}
get_last <- function(x) {{
  return(x[length(x)])
}}
block.infos <- list()
for(l in names(signals)) {{
  signal <- signals[[l]]
  seq.ids <- signal$seq_id[1]
  starts <- signal$pos_id[1]
  ends <- signal$pos_id[1] + mask.size - 1
  for(i in 2 : nrow(signal)) {{
    new.start <- signal$pos_id[i]
    new.seq.id <- signal$seq_id[i]
    if(new.seq.id != get_last(seq.ids) | new.start > get_last(ends)) {{  # The condition that a new block starts (either new sequence or no overlap
      starts <- c(starts, new.start)
      seq.ids <- c(seq.ids, new.seq.id)
      ends <- c(ends, new.start + mask.size - 1)
    }} else {{
      ends[length(ends)] <- new.start + mask.size - 1
    }}
  }}
  block.info <- data.frame(seq.id = seq.ids, start = starts, end = ends)
  print(ggplot(block.info) + geom_histogram(aes(x = end - start + 1), binwidth = 1) + ggtitle(paste0('The size of the critical window block in ', l)))
  block.infos[[l]] <- block.info
}}
```

# How far between two blocks

```{{r}}
get_pairwise_dist <- function(x){{
  id <- x$seq.id[1]
  a <- c()  # Name of block 1
  b <- c()  # Name of block 2
  d <- c()  # Distance btw block 1 and 2
  l1 <- c()  # Size of block 1
  l2 <- c()  # Size of block 2
  for(j in 1 : nrow(x)) {{
    seq1 <- paste(id, j, sep= '-')
    pos1 <- mean(c(x[j, ]$start, x[j, ]$end))
    len1 <- x[j, ]$end - x[j, ]$start + 1
    for(k in j : nrow(x)) {{
      seq2 <- paste(id, k, sep= '-')
      pos2 <- mean(c(x[k, ]$start, x[k, ]$end))
      len2 <- x[k, ]$end - x[k, ]$start + 1
      dist <- (pos2 - pos1) # / mean(c(len1, len2))
      a <- c(a, seq1)
      b <- c(b, seq2)
      d <- c(d, dist)
      l1 <- c(l1, len1)
      l2 <- c(l2, len2)
    }}
  }}
  re <- data.frame(block.1 = a, block.2 = b, distance = d, nblock = nrow(x), size.1 = l1, size.2 = len2)
  return(re)
}}
for(l in names(block.infos)) {{
  block.info <- block.infos[[l]]
  blockwise.distance <- c()
  for(i in unique(block.info$seq.id)) {{
    blocks.in.seq <- block.info[block.info$seq.id == i, ]
    blockwise.distance <- rbind(blockwise.distance, get_pairwise_dist(blocks.in.seq))
  }}
  blockwise.distance$small.block.ind <- blockwise.distance$size.1 <= mask.size * 2 & blockwise.distance$size.2 <= mask.size * 2
  p <- ggplot(blockwise.distance[blockwise.distance$block.1 != blockwise.distance$block.2,]) +
  geom_histogram(aes(x = distance), binwidth = 10) + facet_grid(small.block.ind ~ nblock) +
  ggtitle(paste0('Distance between blocks \n (group by the number of blocks per sequence \n & whether both blocks are small) \n in ', l)) +
  theme(axis.text.x=element_text(angle=90,hjust=1))
  print(p)
}}

```
'''.format(envir=params.envir, prefix_dir=params.prefix_dir, mask_size=wildcards.mask_size)
        o = open(output.o, 'w')
        o.write(rmd)
        o.close()

rule signal_block_report_html:
    input:
        rmd = 'report/{model}/{{dataname}}.{{data}}_sliding_window.signal_block.MaskSize_{{mask_size}}.Rmd'.format(model=config['model']['name']),
    output:
        'report/{model}/{{dataname}}.{{data}}_sliding_window.signal_block.MaskSize_{{mask_size}}.html'.format(model=config['model']['name'])
    shell:
        '''Rscript -e "rmarkdown::render('./{input.rmd}')"'''
