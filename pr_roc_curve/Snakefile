# This pipeline takes y, predicted y and output PR, ROC curves calculated by scikit-learn
# toolkit and saves it as a feather table for downstream analysis

# Here we assume that the y and y_pred contains two directions !!
configfil: 'config.yaml'

def get_names(config):
    files = []
    for group in config:
        for data in config[group]:
            files.append('curve/{group}/pr_{data}.feather'.format(group=group, data=data))
            files.append('curve/{group}/pr_{data}.feather'.format(group=group, data=data))
    return files

run combine:
    input:
        files = get_names(config)
    output:
        'curves.feather'
    shell:
        'scripts/combine.py --files {input.files} --output {output[0]}'

run pr:
    input:
        y = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['path']
        yp = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['path']
    params:
        y_name = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['name'],
        y_idx = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['label_idx'],
        y_double = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['double'],
        y_remove = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['remove'],
        yp_name = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['name'],
        yp_idx = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['label_idx'],
        yp_double = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['double'],
        yp_remove = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['remove'],
        data_name = lambda wildcards: wildcards.data,
        info = lambda wildcards: config[wildcards.group]['info'],
    output:
        temp('curve/{group}/pr_{data}.feather')
    shell:
        'scripts/curve.py --ypath {input.y} --yppath {input.yp} \
                        --yname {params.y_name} --ypname {params.yp_name} \
                        --yidx {params.y_idx} --ypidx {params.yp_idx} \
                        --output {output[0]} \
                        --mode pr \
                        --name {params.data_name} \
                        --info {params.info} \
                        --ydouble {params.y_double} --ypdouble {params.yp_double} \
                        --yremove {params.yp_remove} --ypremove {params.yp_remove}'
run roc:
    input:
        y = lambda wildcards: config[wildcards.group][wildcards.data]['y']['path']
        yp = lambda wildcards: config[wildcards.group][wildcards.data]['ypred']['path']
    params:
        y_name = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['name'],
        y_idx = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['label_idx'],
        y_double = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['double'],
        y_remove = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['y']['remove'],
        yp_name = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['name'],
        yp_idx = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['label_idx'],
        yp_double = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['double'],
        yp_remove = lambda wildcards: config[wildcards.group]['data'][wildcards.data]['ypred']['remove'],
        data_name = lambda wildcards: wildcards.data,
        info = lambda wildcards: config[wildcards.group]['info'],
    output:
        temp('curve/{group}/roc_{data}.feather')
    shell:
        'scripts/curve.py --ypath {input.y} --yppath {input.yp} \
                        --yname {params.y_name} --ypname {params.yp_name} \
                        --yidx {params.y_idx} --ypidx {params.yp_idx} \
                        --output {output[0]} \
                        --mode roc \
                        --name {params.data_name} \
                        --info {params.info} \
                        --ydouble {params.y_double} --ypdouble {params.yp_double} \
                        --yremove {params.yp_remove} --ypremove {params.yp_remove}'
