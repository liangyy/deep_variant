# This pipeline takes y, predicted y and output PR, ROC curves calculated by scikit-learn
# toolkit and saves it as a feather table for downstream analysis

# configfile: 'config.yaml'

def get_names(config, wildcards):
    files = []
    for group in config[wildcards.run_name]:
        if 'data' not in config[wildcards.run_name][group]:
            continue
        for data in config[wildcards.run_name][group]['data']:
            files.append('curve/{run_name}.{group}/pr_{data}.feather'.format(group=group, data=data, run_name=wildcards.run_name))
            files.append('curve/{run_name}.{group}/roc_{data}.feather'.format(group=group, data=data, run_name=wildcards.run_name))
    return files

rule combine:
    input:
        files = lambda wildcards: get_names(config, wildcards)
    output:
        'result/{run_name}_curves.feather'
    shell:
        'python scripts/combine.py --files {input.files} --output {output[0]}'

rule pr:
    input:
        y = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['path'],
        yp = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['path']
    params:
        y_name = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['name'],
        y_idx = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['label_idx'],
        y_double = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['double'],
        y_remove = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['remove'],
        yp_name = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['name'],
        yp_idx = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['label_idx'],
        yp_double = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['double'],
        yp_remove = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['remove'],
        data_name = lambda wildcards: wildcards.data,
        info = lambda wildcards: config[wildcards.run_name][wildcards.group]['info'],
    output:
        temp('curve/{run_name}.{group}/pr_{data}.feather')
    shell:
        'python scripts/curve.py --ypath {input.y} --yppath {input.yp} \
                        --yname {params.y_name} --ypname {params.yp_name} \
                        --yidx {params.y_idx} --ypidx {params.yp_idx} \
                        --output {output[0]} \
                        --mode pr \
                        --name {params.data_name} \
                        --info {params.info} \
                        --ydouble {params.y_double} --ypdouble {params.yp_double} \
                        --yremove {params.y_remove} --ypremove {params.yp_remove}'
rule roc:
    input:
        y = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['path'],
        yp = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['path']
    params:
        y_name = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['name'],
        y_idx = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['label_idx'],
        y_double = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['double'],
        y_remove = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['y']['remove'],
        yp_name = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['name'],
        yp_idx = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['label_idx'],
        yp_double = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['double'],
        yp_remove = lambda wildcards: config[wildcards.run_name][wildcards.group]['data'][wildcards.data]['ypred']['remove'],
        data_name = lambda wildcards: wildcards.data,
        info = lambda wildcards: config[wildcards.run_name][wildcards.group]['info'],
    output:
        temp('curve/{run_name}.{group}/roc_{data}.feather')
    shell:
        'python scripts/curve.py --ypath {input.y} --yppath {input.yp} \
                        --yname {params.y_name} --ypname {params.yp_name} \
                        --yidx {params.y_idx} --ypidx {params.yp_idx} \
                        --output {output[0]} \
                        --mode roc \
                        --name {params.data_name} \
                        --info {params.info} \
                        --ydouble {params.y_double} --ypdouble {params.yp_double} \
                        --yremove {params.y_remove} --ypremove {params.yp_remove}'

rule report_rmd:
    input:
        'result/{run_name}_curves.feather'
    params:
        lambda wildcards: wildcards.run_name
    output:
        temp('report/{run_name}_plot.Rmd')
    run:
        rmd = '''---
title: "Deep brain - Performance ROC/PR curves"
output:
    html_document:
        number_sections: true
        toc: true
        toc_depth: 3
date: "`r format(Sys.time(), '%d %B, %Y')`"
---

```{{r setup}}
knitr::opts_knit$set(root.dir = '{envir}')
```

<style>
    .col2 {{
        columns: 2 200px;         /* number of columns and width in pixels*/
            -webkit-columns: 2 200px; /* chrome, safari */
            -moz-columns: 2 200px;    /* firefox */
    }}
    .col3 {{
    columns: 3 100px;
    -webkit-columns: 3 100px;
    -moz-columns: 3 100px;
    }}
</style>

```{{r, echo=FALSE}}
library(feather)
library(ggplot2)
library(bsselectR)
source('scripts/my_r.R')
prefix <- '{prefix}'
path <- 'plots/'
envir <- '{envir}'
curves <- read_feather('{input}')
curves.roc <- curves[curves$type == 'roc', ]
plots.roc <- list()
for(i in unique(curves.roc$data)){{
    p <- ggplot(curves.roc[curves.roc$data == i, ]) + geom_point(aes(x = fpr, y = tpr, group = info, color = info), size = 0.1, alpha = 0.1) +
        ggtitle(paste('ROC curve', 'of data', i)) +
        theme(title = element_text(size=5), text = element_text(size=5)) +
        coord_fixed(ratio = 1)
    plots.roc <- save_plot(prefix, p, i, path, plots.roc, envir, 'roc')
}}
curves.pr <- curves[curves$type == 'pr', ]
plots.pr <- list()
for(i in unique(curves.pr$data)){{
    p <- ggplot(curves.pr[curves.pr$data == i, ]) + geom_point(aes(x = recall, y = precision, group = info, color = info), size = 0.1, alpha = 0.1) +
        ggtitle(paste('PR curve', 'of data', i)) +
        theme(title = element_text(size=5), text = element_text(size=5)) +
        coord_fixed(ratio = 1)
    plots.pr <- save_plot(prefix, p, i, path, plots.pr, envir, 'pr')
}}
```

<div class="col2">
```{{r, echo=FALSE, warning=FALSE}}
bsselect(plots.roc, type = "img", selected = names(plots.roc)[1],
        live_search = TRUE, show_tick = TRUE, height = 3, width = 4,
        frame_height = 300, frame_width = 400)
bsselect(plots.pr, type = "img", selected = names(plots.pr)[1],
        live_search = TRUE, show_tick = TRUE, height = 3, width = 4,
        frame_height = 300, frame_width = 400)
```
</div>
'''.format(prefix=params[0], input=input[0], envir='../')
        o = open(output[0], 'w')
        o.write(rmd)
        o.close()

rule report_html:
    input:
        rmd = 'report/{run_name}_plot.Rmd',
        data = 'result/{run_name}_curves.feather'
    output:
        'report/{run_name}_plot.html'
    shell:
        '''Rscript -e "rmarkdown::render('./{input.rmd}')"'''
